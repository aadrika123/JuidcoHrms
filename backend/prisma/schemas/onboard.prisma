//!-----------------------------------------------------------------//
// !Author: Krish
// !status: Open

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model employees {
  id                      Int                          @id @default(autoincrement())
  emp_id                  String
  emp_type                Int // 0 existing, 1 New
  emp_office_details      employee_office_details      @relation(fields: [emp_office_details_id], references: [id])
  emp_office_details_id   Int
  emp_basic_details       employee_basic_details       @relation(fields: [emp_basic_details_id], references: [id])
  emp_basic_details_id    Int
  emp_personal_details    employee_personal_details    @relation(fields: [emp_personal_details_id], references: [id])
  emp_personal_details_id Int
  emp_family_details      employee_family_details[]
  emp_nominee_details     employee_nominee_details[]
  emp_address_details     employee_address_details     @relation(fields: [emp_address_details_id], references: [id])
  emp_address_details_id  Int
  emp_increment_details   employee_increment_details[]
  emp_promotion_details   employee_promotion_details[]
  // // emp_transfer_details    employee_transfer_details[]
  emp_timebound_details   employee_timebound_details[]
  emp_join_details        employee_join_details        @relation(fields: [emp_join_details_id], references: [id])
  emp_join_details_id     Int
  emp_education_details   employee_education_details[]
  emp_training_details    employee_training_details[]
  emp_loan_details        employee_loan_details        @relation(fields: [emp_loan_details_id], references: [id])
  emp_loan_details_id     Int
  emp_salary_details      employee_salary_details      @relation(fields: [emp_salary_details_id], references: [id])
  emp_salary_details_id   Int
  created_at              DateTime                     @default(now()) @map("created_at")
  updated_at              DateTime                     @updatedAt @map("updated_at")
}

model employee_office_details {
  id              Int         @id @default(autoincrement())
  emp_type        Int
  office_name     String
  office_code     String
  ddo_designation String
  ddo_code        String
  district        String
  employee        employees[]
  created_at      DateTime    @default(now()) @map("created_at")
  updated_at      DateTime    @updatedAt @map("updated_at")
}

model employee_basic_details {
  id                  Int         @id @default(autoincrement())
  emp_id              String
  emp_image           String
  emp_name            String
  mode_of_recruitment String // Assuming you want to store it as a string, adjust as needed
  contact_no          String
  emg_contact_no      String
  aadhar_no           String
  epic_no             String
  gender              String // Assuming you want to store it as a string, adjust as needed
  pran                String?
  emp_type            String // Assuming you want to store it as a string, adjust as needed
  weight              String?
  height              String?
  cps                 String?
  gps                 String
  dob                 DateTime
  employee            employees[]
  created_at          DateTime    @default(now()) @map("created_at")
  updated_at          DateTime    @updatedAt @map("updated_at")
}

model employee_personal_details {
  id                          Int         @id @default(autoincrement())
  married_status              String
  identification_marks        String
  religion                    String
  emp_categories              String
  emp_home_state              String
  emp_district                String
  emp_blood_group             String
  emp_health_status           String
  emp_health_file             String?
  emp_ltc_home_town           String
  emp_nearest_railway_station String
  emp_phy_health_type         String?
  emp_family                  String?
  emp_family_name             String?
  emp_office_name             String?
  emp_org_name                String?
  emp_lang                    Json
  employee                    employees[]
  created_at                  DateTime    @default(now()) @map("created_at")
  updated_at                  DateTime    @updatedAt @map("updated_at")
}

model employee_family_details {
  id           Int       @id @default(autoincrement())
  name         String
  relation     String
  dob          String
  dependent    String
  employees    employees @relation(fields: [employees_id], references: [id])
  employees_id Int
  created_at   DateTime  @default(now()) @map("created_at")
  updated_at   DateTime  @updatedAt @map("updated_at")
}

model employee_nominee_details {
  id           Int       @id @default(autoincrement())
  nominee_name String
  relation     String
  percentage   Float
  address      String
  minor        String
  employees    employees @relation(fields: [employees_id], references: [id])
  employees_id Int
  created_at   DateTime  @default(now()) @map("created_at")
  updated_at   DateTime  @updatedAt @map("updated_at")
}

model employee_address_details {
  id                          Int         @id @default(autoincrement())
  // type                        String
  address_primary             String
  address_secondary           String?
  village                     String
  post_office                 String?
  state                       String
  district                    String
  block_ulb                   String?
  pin_code                    String
  police_station              String?
  emp_address_same            String?
  address_primary_permanent   String?
  address_secondary_permanent String?
  village_permanent           String?
  post_office_permanent       String?
  state_permanent             String?
  district_permanent          String?
  block_ulb_permanent         String?
  pin_code_permanent          String?
  police_station_permanent    String?
  emp_address_same_permanent  String?
  employee                    employees[]
  // employees                   employees @relation(fields: [employees_id], references: [id])
  // employees_id                Int
  created_at                  DateTime    @default(now()) @map("created_at")
  updated_at                  DateTime    @updatedAt @map("updated_at")
}

// -------------Employee Service History-----------------//
model employee_increment_details {
  id                  Int       @id @default(autoincrement())
  scale               String
  inc_date            String
  inc_amount          Float
  basic_pay_after_inc Float
  vide_order_no       String
  vide_order_date     String
  employees           employees @relation(fields: [employees_id], references: [id])
  employees_id        Int
  created_at          DateTime  @default(now()) @map("created_at")
  updated_at          DateTime  @updatedAt @map("updated_at")
}

model employee_promotion_details {
  id              Int       @id @default(autoincrement())
  designation     Json
  scale           Json
  vide_order_no   String
  vide_order_date String
  transfer        String
  employees       employees @relation(fields: [employees_id], references: [id])
  employees_id    Int
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @updatedAt @map("updated_at")
}

// // model employee_transfer_details {
// //   id                  Int       @id @default(autoincrement())
// //   designation         Json
// //   office              Json
// //   join_date        String
// //   vide_order_no       String
// //   vide_order_date     String
// //   transfer_after_prom String
// //   employees           employees @relation(fields: [employees_id], references: [id])
// //   employees_id        Int
// //   created_at          DateTime  @default(now()) @map("created_at")
// //   updated_at          DateTime  @updatedAt @map("updated_at")
// // }

// // //-------------- Employee Service History---------------------//

// // //-------------- Employee SALARY DETAILS ---------------------//

model employee_salary_details {
  id                   Int                         @id @default(autoincrement())
  emp_salary_allow     employee_salary_allow[]
  emp_salary_deduction employee_salary_deduction[]
  employee             employees[]
  created_at           DateTime                    @default(now()) @map("created_at")
  updated_at           DateTime                    @updatedAt @map("updated_at")
}

model employee_salary_allow {
  id                         Int                     @id @default(autoincrement())
  name                       String
  wfe_date                   String
  amount_in                  Float
  employee_salary_details    employee_salary_details @relation(fields: [employee_salary_details_id], references: [id])
  employee_salary_details_id Int
  created_at                 DateTime                @default(now()) @map("created_at")
  updated_at                 DateTime                @updatedAt @map("updated_at")
}

model employee_salary_deduction {
  id                         Int                     @id @default(autoincrement())
  name                       String
  wfe_date                   String
  acnt_no                    Float
  amount_in                  Float
  employee_salary_details    employee_salary_details @relation(fields: [employee_salary_details_id], references: [id])
  employee_salary_details_id Int
  created_at                 DateTime                @default(now()) @map("created_at")
  updated_at                 DateTime                @updatedAt @map("updated_at")
}

// // //-------------- Employee SALARY DETAILS ---------------------//

// // //-------------- Employee Join Details ---------------------//
model employee_join_details {
  id                      Int          @id @default(autoincrement())
  department              department?  @relation(fields: [department_id], references: [id])
  department_id           Int?
  designation             designation? @relation(fields: [designation_id], references: [id])
  designation_id          Int?
  task                    String?
  class                   String?
  doj                     String?
  effective_pay_commision String?
  confirmation_order      String?
  pay_scale               Float?
  pay_band                Float?
  grade_pay               Float?
  doc                     String?
  basic_pay               Float?
  conf_order_number       Float?
  deduction_type          String?
  conf_order_date         String?
  member_gis              String?
  appoint_authority       String?
  gis_account             Float?
  ulb                     String?
  last_inc_order          String?
  name_of_service         String?
  last_inc_order_date     String?
  bank_name               String?
  wef_date                String?
  branch_name             String?
  pf_category             String?
  acc_number              String?
  ifsc                    String?
  sen_grade_list          String?
  employee                employees[]
  created_at              DateTime     @default(now()) @map("created_at")
  updated_at              DateTime     @updatedAt @map("updated_at")
}

// // //-------------- Employee Join Details ---------------------//

// // //-------------- Employee Education & TRAINING Details ---------------------//
model employee_education_details {
  id           Int       @id @default(autoincrement())
  edu_level    String?
  stream       String?
  board        String?
  passing_year String?
  marks        Int?
  grade        String?
  upload_edu   String?
  employee     employees @relation(fields: [employee_id], references: [id])
  employee_id  Int
  created_at   DateTime  @default(now()) @map("created_at")
  updated_at   DateTime  @updatedAt @map("updated_at")
}

model employee_training_details {
  id               Int       @id @default(autoincrement())
  name_of_training String?
  training_type    String?
  name_of_inst     String?
  starting_from    Json?
  end_to           Json?
  tot_day_training String?
  upload_edu       String?
  employee         employees @relation(fields: [employee_id], references: [id])
  employee_id      Int
  created_at       DateTime  @default(now()) @map("created_at")
  updated_at       DateTime  @updatedAt @map("updated_at")
}

// // //-------------- Employee Education & TRAINING Details ---------------------//

model employee_timebound_details {
  id              Int       @id @default(autoincrement())
  pay_scale       Json
  inc_amt         String
  b_after_pay     String
  vide_order_no   String
  vide_order_date String
  remarks         String
  employees       employees @relation(fields: [employees_id], references: [id])
  employees_id    Int
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @updatedAt @map("updated_at")
}

// // //-------------- Employee LOAN Details ---------------------//

model employee_loan_details {
  id                 Int                       @id @default(autoincrement())
  emp_loan           employee_loan[]
  emp_loan_Principal employee_loan_Principal[]
  emp_loan_recovery  employee_loan_recovery[]
  employee           employees[]
  created_at         DateTime                  @default(now()) @map("created_at")
  updated_at         DateTime                  @updatedAt @map("updated_at")
}

model employee_loan {
  id                  Int                   @id @default(autoincrement())
  loan_name_det       String
  loan_account_num    String
  sanc_order_num      String
  dos                 String
  san_authority       String
  dod                 String
  dis_treasury_name   String
  voucher_date        String
  treasury_voc_num    String
  emp_loan_details    employee_loan_details @relation(fields: [emp_loan_details_id], references: [id])
  emp_loan_details_id Int
  created_at          DateTime              @default(now()) @map("created_at")
  updated_at          DateTime              @updatedAt @map("updated_at")
}

model employee_loan_Principal {
  id                  Int                   @id @default(autoincrement())
  loan_name_principal String
  tot_amt_released    String
  total_install       String
  monthly_install     String
  last_paid_install   String
  month_last_install  String
  total_amnt          Float
  emp_loan_details    employee_loan_details @relation(fields: [emp_loan_details_id], references: [id])
  emp_loan_details_id Int
  created_at          DateTime              @default(now()) @map("created_at")
  updated_at          DateTime              @updatedAt @map("updated_at")
}

model employee_loan_recovery {
  id                          Int                   @id @default(autoincrement())
  loan_name_recovery          String
  total_int_amount            String
  total_install_recovery      String
  monthly_install_recovery    String
  last_paid_install_recovery  String
  month_last_install_recovery String
  total_amnt_recovery         String
  emp_loan_details            employee_loan_details @relation(fields: [emp_loan_details_id], references: [id])
  emp_loan_details_id         Int
  created_at                  DateTime              @default(now()) @map("created_at")
  updated_at                  DateTime              @updatedAt @map("updated_at")
}

//-------------- Employee LOAN Details ---------------------//
