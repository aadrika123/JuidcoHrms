{"level":"error","message":"Date & Time:- 2024-04-24T12:54:24.480Z POST 0.47402800001145806 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_type: 1,\n           office_name: \"4adsc\",\n           office_code: \"4adsc\",\n           ddo_code: \"23424\",\n           ddo_designation: \"asdcsd\",\n           district: 3\n                     ~\n         }\n       })\n\nArgument `district`: Invalid value provided. Expected String, provided Int. "}
{"level":"error","message":"Date & Time:- 2024-04-24T12:58:44.985Z POST 0.46143799999845214 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           married_status: \"Single\",\n           identification_marks: \"casd\",\n           religion: \"Muslim\",\n           emp_categories: \"ST\",\n           emp_home_state: \"Jharkhand\",\n           emp_district: \"Dumka\",\n                         ~~~~~~~\n           emp_blood_group: \"A-\",\n           emp_health_status: \"Fit\",\n           emp_ltc_home_town: \"Dhanbād\",\n           emp_nearest_railway_station: \"casdcsda\",\n           emp_phy_health_type: \"Physically Disabled\",\n           emp_family: \"Father\",\n           emp_family_name: \"Krish Vishwakarma\",\n           emp_office_name: undefined,\n           emp_org_name: undefined,\n           emp_lang: [\n             {\n               lang: \"Punjabi\",\n               lang_type: [\n                 \"write\"\n               ]\n             }\n           ]\n         }\n       })\n\nArgument `emp_district`: Invalid value provided. Expected Int, provided String. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:01:30.661Z POST 0.37833300000056624 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: []\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:06:53.694Z POST 0.6227659999858588 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 21212\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 name: \"PT\",\n                 wfe_date: \"0111-01-01\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:09:15.091Z POST 0.3378700000466779 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"HRA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 2121\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 212,\n                 name: \"GPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:16:50.383Z POST 0.3239039999898523 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"HRA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 212\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 name: \"PT\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:49:16.931Z POST 0.3367469999939203 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:49:24.649Z POST 0.4467079999158159 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:53:44.278Z POST 0.49531599995680153 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:00:44.258Z POST 0.47176999994553626 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:03:07.324Z POST 2.5748300000004747 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:03:52.110Z POST 0.9692230000000563 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:58:36.912Z POST 1.6105289999977686 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:59:01.207Z POST 0.35669799998868257 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:59:31.084Z POST 0.40821799999685027 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:01:53.430Z POST 0.4079529999871738 /api/hrms/v1/pay/payroll/update status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:02:06.039Z POST 0.41431800002465025 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:02:51.749Z POST 0.30040999996708706 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:07:29.844Z POST 0.34144700004253536 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:08:28.455Z POST 2.16807400000107 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.061Z POST 0.5652980000013486 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.496Z POST 0.36879900000349153 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.680Z POST 0.44236800000362564 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.879Z POST 0.3772749999916414 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.563Z POST 0.359628000005614 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.737Z POST 0.2801260000123875 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.929Z POST 0.3160559999960242 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:14:03.105Z POST 0.5876399999979185 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:23:08.909Z POST 2.447982999990927 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:24:30.936Z POST 2.4588050000002113 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:30:43.407Z POST 2.215028999999049 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:33:53.844Z POST 2.2070409999996627 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:34:18.340Z POST 2.2170560000004116 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:34:50.023Z POST 2.362772999998924 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:35:16.155Z POST 2.207268000000113 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:35:56.313Z POST 2.134538000000248 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: 32\n    }\n  ]\n  ~~~~~~~~~~~~~~~~~~~~\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:36:22.724Z POST 2.1481190000004062 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: 32\n    }\n  ],\n  ~~~~~~~~~~~~~~~~~~~~\n  where: {\n    emp_id: {\n      equals: \"EMP912e46\"\n    },\n    month: 4,\n    year: 2024\n  }\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:36:46.523Z POST 0.7029589999983727 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: undefined\n    }\n  ],\n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  where: {\n    emp_id: {\n      equals: undefined\n    },\n    month: undefined,\n    year: undefined\n  }\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:44:38.718Z POST 0.6663599999956205 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"'Microsoft.Jet.OLEDB.4.0'\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:46:57.324Z POST 2.0872629999998935 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"format\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:47:30.846Z POST 2.103993000000628 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42501`. Message: `ERROR: could not open file \"/Desktop\" for writing: Permission denied\nHINT: COPY TO instructs the PostgreSQL server process to write a file. You may want a client-side facility such as psql's \\copy.` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:49:37.492Z POST 2.139842999999928 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42501`. Message: `ERROR: could not open file \"/Desktop\" for writing: Permission denied\nHINT: COPY TO instructs the PostgreSQL server process to write a file. You may want a client-side facility such as psql's \\copy.` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:51:08.868Z POST 2.2757680000004257 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42809`. Message: `ERROR: could not open file \"/var\" for writing: Is a directory` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:51:38.946Z POST 2.114306000000397 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42809`. Message: `ERROR: could not open file \"/tmp\" for writing: Is a directory` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:57:50.134Z POST 2.0849379999999655 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"WITH\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:58:04.742Z POST 2.1322230000000673 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"WITH\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T13:09:48.562Z POST 0.2778040000121109 /api/hrms/v1/employee/leave status = false, err = \nInvalid `prisma.employee_leave_details.create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/employee/empLeave.dao.ts:51:62\n\n  48   },\n  49 };\n  50 \n→ 51 const leaveRequest = await prisma.employee_leave_details.create({\n       data: {\n         employee_id: \"EMP912e43\",\n         emp_leave_type_id: null,\n         leave_from: \"2024-04-15\",\n         leave_to: \"2024-04-19\",\n         total_days: 5,\n         leave_reason: \"casc\",\n         file_upload: null,\n         half_day: true,\n         leave_status: undefined,\n     +   emp_leave_type: {\n     +     create: employee_leave_typeCreateWithoutEmployee_leave_detailsInput | employee_leave_typeUncheckedCreateWithoutEmployee_leave_detailsInput,\n     +     connectOrCreate: employee_leave_typeCreateOrConnectWithoutEmployee_leave_detailsInput,\n     +     connect: employee_leave_typeWhereUniqueInput\n     +   }\n       }\n     })\n\nArgument `emp_leave_type` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-26T04:39:30.028Z POST 0.47352500003762543 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (318, null, 2024-04-26, 2024-04-26 10:09:30.017, null, 0, 1, 2024-04-26 10:09:30.018, 2024-04-26 10:09:30.018).` "}
{"level":"error","message":"Date & Time:- 2024-04-26T10:48:15.881Z POST 3.958526999995229 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-04-26, 2024-04-26 16:18:15.825, null, 0, 1, 2024-04-26 16:18:15.869, 2024-04-26 16:18:15.869).` "}
{"level":"error","message":"Date & Time:- 2024-04-26T10:51:28.701Z POST 0.34565599999041297 /api/hrms/v1/employee/create status = false, err = Unexpected socket close "}
