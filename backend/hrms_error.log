{"level":"error","message":"Date & Time:- 2024-04-24T12:54:24.480Z POST 0.47402800001145806 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_type: 1,\n           office_name: \"4adsc\",\n           office_code: \"4adsc\",\n           ddo_code: \"23424\",\n           ddo_designation: \"asdcsd\",\n           district: 3\n                     ~\n         }\n       })\n\nArgument `district`: Invalid value provided. Expected String, provided Int. "}
{"level":"error","message":"Date & Time:- 2024-04-24T12:58:44.985Z POST 0.46143799999845214 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           married_status: \"Single\",\n           identification_marks: \"casd\",\n           religion: \"Muslim\",\n           emp_categories: \"ST\",\n           emp_home_state: \"Jharkhand\",\n           emp_district: \"Dumka\",\n                         ~~~~~~~\n           emp_blood_group: \"A-\",\n           emp_health_status: \"Fit\",\n           emp_ltc_home_town: \"Dhanbād\",\n           emp_nearest_railway_station: \"casdcsda\",\n           emp_phy_health_type: \"Physically Disabled\",\n           emp_family: \"Father\",\n           emp_family_name: \"Krish Vishwakarma\",\n           emp_office_name: undefined,\n           emp_org_name: undefined,\n           emp_lang: [\n             {\n               lang: \"Punjabi\",\n               lang_type: [\n                 \"write\"\n               ]\n             }\n           ]\n         }\n       })\n\nArgument `emp_district`: Invalid value provided. Expected Int, provided String. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:01:30.661Z POST 0.37833300000056624 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: []\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:06:53.694Z POST 0.6227659999858588 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 21212\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 name: \"PT\",\n                 wfe_date: \"0111-01-01\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:09:15.091Z POST 0.3378700000466779 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"HRA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 2121\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 212,\n                 name: \"GPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:16:50.383Z POST 0.3239039999898523 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"HRA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 212\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 name: \"PT\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:49:16.931Z POST 0.3367469999939203 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:49:24.649Z POST 0.4467079999158159 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:53:44.278Z POST 0.49531599995680153 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:00:44.258Z POST 0.47176999994553626 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:03:07.324Z POST 2.5748300000004747 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:03:52.110Z POST 0.9692230000000563 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:58:36.912Z POST 1.6105289999977686 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:59:01.207Z POST 0.35669799998868257 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:59:31.084Z POST 0.40821799999685027 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:01:53.430Z POST 0.4079529999871738 /api/hrms/v1/pay/payroll/update status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:02:06.039Z POST 0.41431800002465025 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:02:51.749Z POST 0.30040999996708706 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:07:29.844Z POST 0.34144700004253536 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:08:28.455Z POST 2.16807400000107 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.061Z POST 0.5652980000013486 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.496Z POST 0.36879900000349153 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.680Z POST 0.44236800000362564 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.879Z POST 0.3772749999916414 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.563Z POST 0.359628000005614 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.737Z POST 0.2801260000123875 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.929Z POST 0.3160559999960242 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:14:03.105Z POST 0.5876399999979185 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:23:08.909Z POST 2.447982999990927 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:24:30.936Z POST 2.4588050000002113 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:30:43.407Z POST 2.215028999999049 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:33:53.844Z POST 2.2070409999996627 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:34:18.340Z POST 2.2170560000004116 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:34:50.023Z POST 2.362772999998924 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:35:16.155Z POST 2.207268000000113 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:35:56.313Z POST 2.134538000000248 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: 32\n    }\n  ]\n  ~~~~~~~~~~~~~~~~~~~~\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:36:22.724Z POST 2.1481190000004062 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: 32\n    }\n  ],\n  ~~~~~~~~~~~~~~~~~~~~\n  where: {\n    emp_id: {\n      equals: \"EMP912e46\"\n    },\n    month: 4,\n    year: 2024\n  }\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:36:46.523Z POST 0.7029589999983727 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: undefined\n    }\n  ],\n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  where: {\n    emp_id: {\n      equals: undefined\n    },\n    month: undefined,\n    year: undefined\n  }\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:44:38.718Z POST 0.6663599999956205 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"'Microsoft.Jet.OLEDB.4.0'\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:46:57.324Z POST 2.0872629999998935 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"format\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:47:30.846Z POST 2.103993000000628 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42501`. Message: `ERROR: could not open file \"/Desktop\" for writing: Permission denied\nHINT: COPY TO instructs the PostgreSQL server process to write a file. You may want a client-side facility such as psql's \\copy.` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:49:37.492Z POST 2.139842999999928 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42501`. Message: `ERROR: could not open file \"/Desktop\" for writing: Permission denied\nHINT: COPY TO instructs the PostgreSQL server process to write a file. You may want a client-side facility such as psql's \\copy.` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:51:08.868Z POST 2.2757680000004257 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42809`. Message: `ERROR: could not open file \"/var\" for writing: Is a directory` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:51:38.946Z POST 2.114306000000397 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42809`. Message: `ERROR: could not open file \"/tmp\" for writing: Is a directory` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:57:50.134Z POST 2.0849379999999655 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"WITH\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:58:04.742Z POST 2.1322230000000673 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"WITH\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T13:09:48.562Z POST 0.2778040000121109 /api/hrms/v1/employee/leave status = false, err = \nInvalid `prisma.employee_leave_details.create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/employee/empLeave.dao.ts:51:62\n\n  48   },\n  49 };\n  50 \n→ 51 const leaveRequest = await prisma.employee_leave_details.create({\n       data: {\n         employee_id: \"EMP912e43\",\n         emp_leave_type_id: null,\n         leave_from: \"2024-04-15\",\n         leave_to: \"2024-04-19\",\n         total_days: 5,\n         leave_reason: \"casc\",\n         file_upload: null,\n         half_day: true,\n         leave_status: undefined,\n     +   emp_leave_type: {\n     +     create: employee_leave_typeCreateWithoutEmployee_leave_detailsInput | employee_leave_typeUncheckedCreateWithoutEmployee_leave_detailsInput,\n     +     connectOrCreate: employee_leave_typeCreateOrConnectWithoutEmployee_leave_detailsInput,\n     +     connect: employee_leave_typeWhereUniqueInput\n     +   }\n       }\n     })\n\nArgument `emp_leave_type` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-26T04:39:30.028Z POST 0.47352500003762543 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (318, null, 2024-04-26, 2024-04-26 10:09:30.017, null, 0, 1, 2024-04-26 10:09:30.018, 2024-04-26 10:09:30.018).` "}
{"level":"error","message":"Date & Time:- 2024-04-26T10:48:15.881Z POST 3.958526999995229 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-04-26, 2024-04-26 16:18:15.825, null, 0, 1, 2024-04-26 16:18:15.869, 2024-04-26 16:18:15.869).` "}
{"level":"error","message":"Date & Time:- 2024-04-26T10:51:28.701Z POST 0.34565599999041297 /api/hrms/v1/employee/create status = false, err = Unexpected socket close "}
{"level":"error","message":"Date & Time:- 2024-04-27T04:49:28.051Z POST 0.37543600000208244 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (319, null, 2024-04-27, 2024-04-27 10:19:28.041, null, 0, 1, 2024-04-27 10:19:28.042, 2024-04-27 10:19:28.042).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T05:00:57.346Z POST 0.8903080000018235 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-04-29, 2024-04-29 10:30:57.336, null, 0, 1, 2024-04-29 10:30:57.337, 2024-04-29 10:30:57.337).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T05:59:00.411Z POST 0.35221899999305606 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (319, null, 2024-04-29, 2024-04-29 11:29:00.401, null, 0, 1, 2024-04-29 11:29:00.402, 2024-04-29 11:29:00.402).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T06:52:44.061Z POST 0.3526220000348985 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (318, null, 2024-04-29, 2024-04-29 12:22:44.053, null, 0, 1, 2024-04-29 12:22:44.054, 2024-04-29 12:22:44.054).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:28:35.143Z POST 0.30588500015437603 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-04-29, 2024-04-29 17:58:35.097, null, 0, 1, 2024-04-29 17:58:35.136, 2024-04-29 17:58:35.136).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:52:06.992Z GET 3.9110539999992397 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          skip: NaN,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:53:15.474Z GET 0.43863299999793526 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          skip: NaN,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:53:54.812Z GET 0.6598349999985658 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:53:57.437Z GET 0.31620299999485724 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:54:11.690Z GET 0.7778370000014547 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:54:50.458Z GET 0.4915069999988191 /api/hrms/v1/pay/payroll?limit=10&page=$%7Bpage%7D status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:56:16.931Z GET 0.496714000008069 /api/hrms/v1/pay/payroll?limit=10&page=1&page=1 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T13:02:08.235Z GET 0.39272499992512167 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T13:02:20.074Z GET 0.6066459999419749 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          skip: NaN,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T13:26:59.220Z POST 0.3357710000127554 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (319, null, 2024-04-29, 2024-04-29 18:56:59.21, null, 0, 1, 2024-04-29 18:56:59.212, 2024-04-29 18:56:59.212).` "}
{"level":"error","message":"Date & Time:- 2024-04-30T11:18:32.016Z POST 0.33070899546146393 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (344, null, 2024-04-30, 2024-04-30 16:48:31.973, null, 0, 1, 2024-04-30 16:48:32.014, 2024-04-30 16:48:32.014).` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:46:18.036Z GET 0.4355939999950351 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:420:46\n\n  417   };\n  418 }\n  419 \n→ 420 const data = await prisma.payroll_master.findMany({\n        skip: NaN,\n        select: {\n          id: true,\n          emp_id: true,\n          emp_name: true,\n          gross_pay: true,\n          leave_days: true,\n          working_hour: true,\n          total_allowance: true,\n          total_deductions: true,\n          non_billable: true,\n          present_days: true,\n          lwp_days: true,\n          salary_deducted: true,\n          status: true,\n          net_pay: true\n        },\n        orderBy: {\n          emp_id: \"asc\"\n        },\n      + take: Int\n      })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:46:20.778Z GET 0.464523000002373 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:420:46\n\n  417   };\n  418 }\n  419 \n→ 420 const data = await prisma.payroll_master.findMany({\n        skip: NaN,\n        select: {\n          id: true,\n          emp_id: true,\n          emp_name: true,\n          gross_pay: true,\n          leave_days: true,\n          working_hour: true,\n          total_allowance: true,\n          total_deductions: true,\n          non_billable: true,\n          present_days: true,\n          lwp_days: true,\n          salary_deducted: true,\n          status: true,\n          net_pay: true\n        },\n        orderBy: {\n          emp_id: \"asc\"\n        },\n      + take: Int\n      })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:46:38.245Z GET 0.34760300000198185 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:420:46\n\n  417   };\n  418 }\n  419 \n→ 420 const data = await prisma.payroll_master.findMany({\n        take: 10,\n        select: {\n          id: true,\n          emp_id: true,\n          emp_name: true,\n          gross_pay: true,\n          leave_days: true,\n          working_hour: true,\n          total_allowance: true,\n          total_deductions: true,\n          non_billable: true,\n          present_days: true,\n          lwp_days: true,\n          salary_deducted: true,\n          status: true,\n          net_pay: true\n        },\n        orderBy: {\n          emp_id: \"asc\"\n        },\n      + skip: Int\n      })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:46:39.458Z GET 0.36843299999600276 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:420:46\n\n  417   };\n  418 }\n  419 \n→ 420 const data = await prisma.payroll_master.findMany({\n        take: 10,\n        select: {\n          id: true,\n          emp_id: true,\n          emp_name: true,\n          gross_pay: true,\n          leave_days: true,\n          working_hour: true,\n          total_allowance: true,\n          total_deductions: true,\n          non_billable: true,\n          present_days: true,\n          lwp_days: true,\n          salary_deducted: true,\n          status: true,\n          net_pay: true\n        },\n        orderBy: {\n          emp_id: \"asc\"\n        },\n      + skip: Int\n      })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:50:34.075Z GET 2.120244999998249 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          take: 10,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:50:46.923Z GET 0.37474400000064634 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          take: 10,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:07.709Z GET 0.7545229999959702 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          take: 10,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:10.189Z GET 0.4126399999950081 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          take: 10,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:21.047Z GET 0.45819000000483356 /api/hrms/v1/pay/payroll?limit=10? status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          skip: NaN,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:27.228Z GET 0.34206100000301376 /api/hrms/v1/pay/payroll?limit=10?page= status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          skip: NaN,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:29.390Z GET 0.3561760000011418 /api/hrms/v1/pay/payroll?limit=10?page=1 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          skip: NaN,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:36.470Z GET 0.5299360000062734 /api/hrms/v1/pay/payroll?limit=10?page=1 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          skip: NaN,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:58:50.382Z GET 0.2768449999857694 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=%222024-04-28%22 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:58:50.582Z GET 0.2624970000470057 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=%222024-04-28%22 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:59:07.917Z GET 0.30673199996817857 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-28 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:59:08.114Z GET 0.27494999999180436 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-28 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:59:44.969Z GET 0.39576499990653247 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-30 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:59:45.183Z GET 0.2804189999587834 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-30 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T07:00:09.062Z GET 0.3692779999691993 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-05-30 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T07:00:09.294Z GET 0.27976900001522154 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-05-30 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T07:18:27.619Z GET 0.2812139999587089 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-29 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T07:18:52.501Z GET 0.312758999876678 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-29 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T10:04:02.744Z GET 2.3660600000293925 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-02T10:04:29.768Z GET 2.139259999999922 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-02T10:06:30.123Z GET 0.309664000000339 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-02T10:06:43.135Z GET 2.1534270000001925 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-02T13:29:32.433Z POST 0.39214899999205954 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (351, null, 2024-05-02, 2024-05-02 18:59:32.425, null, 0, 1, 2024-05-02 18:59:32.426, 2024-05-02 18:59:32.426).` "}
{"level":"error","message":"Date & Time:- 2024-05-02T13:50:04.239Z POST 0.5564079999967362 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-05-02, 2024-05-02 19:20:04.231, null, 0, 1, 2024-05-02 19:20:04.232, 2024-05-02 19:20:04.232).` "}
{"level":"error","message":"Date & Time:- 2024-05-02T13:52:28.478Z POST 3.623348999999507 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-05-02, 2024-05-02 19:22:28.416, null, 0, 1, 2024-05-02 19:22:28.464, 2024-05-02 19:22:28.464).` "}
{"level":"error","message":"Date & Time:- 2024-05-02T13:56:59.567Z POST 2.314951000000292 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (331, null, 2024-05-02, 2024-05-02 19:26:59.483, null, 0, 1, 2024-05-02 19:26:59.552, 2024-05-02 19:26:59.552).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T04:41:44.453Z POST 2.3748729999933857 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (364, null, 2024-05-03, 2024-05-03 10:11:44.363, null, 0, 1, 2024-05-03 10:11:44.438, 2024-05-03 10:11:44.438).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T05:10:46.201Z POST 0.3805229999998119 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (332, null, 2024-05-03, 2024-05-03 10:40:46.192, null, 0, 1, 2024-05-03 10:40:46.193, 2024-05-03 10:40:46.193).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:05:36.214Z GET 2.4822880000001533 /api/hrms/v1/ulb/get?id=3 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: bigint = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:11:09.356Z GET 0.25095299998065457 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:22:32.788Z GET 2.0789529999992737 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42703`. Message: `column \"emp\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:22:33.750Z GET 0.7248009999993883 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42703`. Message: `column \"emp\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:23:20.333Z GET 2.2063680000001114 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type timestamp: \"null\"` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:23:40.891Z GET 2.2936540000000605 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: timestamp without time zone !== unknown\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:24:21.532Z GET 2.5104019999998854 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"[\"` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:31:24.351Z GET 2.086330000000089 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:31:26.164Z GET 0.9997860000003129 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
