{"level":"error","message":"Date & Time:- 2024-04-24T12:54:24.480Z POST 0.47402800001145806 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_type: 1,\n           office_name: \"4adsc\",\n           office_code: \"4adsc\",\n           ddo_code: \"23424\",\n           ddo_designation: \"asdcsd\",\n           district: 3\n                     ~\n         }\n       })\n\nArgument `district`: Invalid value provided. Expected String, provided Int. "}
{"level":"error","message":"Date & Time:- 2024-04-24T12:58:44.985Z POST 0.46143799999845214 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           married_status: \"Single\",\n           identification_marks: \"casd\",\n           religion: \"Muslim\",\n           emp_categories: \"ST\",\n           emp_home_state: \"Jharkhand\",\n           emp_district: \"Dumka\",\n                         ~~~~~~~\n           emp_blood_group: \"A-\",\n           emp_health_status: \"Fit\",\n           emp_ltc_home_town: \"Dhanbād\",\n           emp_nearest_railway_station: \"casdcsda\",\n           emp_phy_health_type: \"Physically Disabled\",\n           emp_family: \"Father\",\n           emp_family_name: \"Krish Vishwakarma\",\n           emp_office_name: undefined,\n           emp_org_name: undefined,\n           emp_lang: [\n             {\n               lang: \"Punjabi\",\n               lang_type: [\n                 \"write\"\n               ]\n             }\n           ]\n         }\n       })\n\nArgument `emp_district`: Invalid value provided. Expected Int, provided String. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:01:30.661Z POST 0.37833300000056624 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: []\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:06:53.694Z POST 0.6227659999858588 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 21212\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 name: \"PT\",\n                 wfe_date: \"0111-01-01\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:09:15.091Z POST 0.3378700000466779 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"HRA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 2121\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 212,\n                 name: \"GPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-24T13:16:50.383Z POST 0.3239039999898523 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"HRA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 212\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 name: \"PT\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"212\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:49:16.931Z POST 0.3367469999939203 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:49:24.649Z POST 0.4467079999158159 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T04:53:44.278Z POST 0.49531599995680153 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:00:44.258Z POST 0.47176999994553626 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:03:07.324Z POST 2.5748300000004747 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:03:52.110Z POST 0.9692230000000563 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:87:34\n\n  84 if (isMany) {\n  85   return await tx[tableName].createMany({ data });\n  86 } else {\n→ 87   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"DA\",\n                 wfe_date: \"1111-11-11\",\n                 amount_in: 3232\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 amount_in: 427,\n                 name: \"EPF\",\n                 wfe_date: \"1111-11-11\",\n                 acnt_no: \"32323\"\n               },\n               {\n                 amount_in: null,\n                 name: null,\n                 wfe_date: null,\n                 acnt_no: null\n               }\n             ]\n           }\n         }\n       })\n\nArgument `amount_in` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:58:36.912Z POST 1.6105289999977686 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:59:01.207Z POST 0.35669799998868257 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T05:59:31.084Z POST 0.40821799999685027 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:01:53.430Z POST 0.4079529999871738 /api/hrms/v1/pay/payroll/update status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:02:06.039Z POST 0.41431800002465025 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:02:51.749Z POST 0.30040999996708706 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:07:29.844Z POST 0.34144700004253536 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:08:28.455Z POST 2.16807400000107 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.061Z POST 0.5652980000013486 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.496Z POST 0.36879900000349153 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.680Z POST 0.44236800000362564 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:30.879Z POST 0.3772749999916414 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.563Z POST 0.359628000005614 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.737Z POST 0.2801260000123875 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:09:31.929Z POST 0.3160559999960242 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:14:03.105Z POST 0.5876399999979185 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:23:08.909Z POST 2.447982999990927 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:24:30.936Z POST 2.4588050000002113 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:30:43.407Z POST 2.215028999999049 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:33:53.844Z POST 2.2070409999996627 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:34:18.340Z POST 2.2170560000004116 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:34:50.023Z POST 2.362772999998924 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:35:16.155Z POST 2.207268000000113 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.update()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:425:46\n\n  422 update_emp_payroll = async (req: Request) => {\n  423   const { status, id } = req.body;\n  424 \n→ 425   const data = await prisma.payroll_master.update({\n          where: {\n            id: undefined,\n        ?   emp_id_month_year?: payroll_masterEmp_idMonthYearCompoundUniqueInput,\n        ?   AND?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   OR?: payroll_masterWhereInput[],\n        ?   NOT?: payroll_masterWhereInput | payroll_masterWhereInput[],\n        ?   emp_id?: StringFilter | String,\n        ?   emp_name?: StringFilter | String,\n        ?   gross_pay?: FloatFilter | Float,\n        ?   leave_days?: IntFilter | Int,\n        ?   working_hour?: IntFilter | Int,\n        ?   total_allowance?: FloatFilter | Float,\n        ?   total_deductions?: FloatFilter | Float,\n        ?   non_billable?: IntFilter | Int,\n        ?   present_days?: IntFilter | Int,\n        ?   lwp_days?: IntFilter | Int,\n        ?   salary_deducted?: FloatFilter | Float,\n        ?   net_pay?: FloatFilter | Float,\n        ?   last_month_lwp_deduction?: FloatFilter | Float,\n        ?   status?: StringNullableFilter | String | Null,\n        ?   date?: DateTimeFilter | DateTime,\n        ?   month?: IntFilter | Int,\n        ?   year?: IntFilter | Int,\n        ?   created_at?: DateTimeFilter | DateTime,\n        ?   updated_at?: DateTimeFilter | DateTime,\n        ?   employees?: EmployeesRelationFilter | employeesWhereInput\n          },\n          data: {\n            status: undefined\n          }\n        })\n\nArgument `where` of type payroll_masterWhereUniqueInput needs at least one of `id` or `emp_id_month_year` arguments. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:35:56.313Z POST 2.134538000000248 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: 32\n    }\n  ]\n  ~~~~~~~~~~~~~~~~~~~~\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:36:22.724Z POST 2.1481190000004062 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: 32\n    }\n  ],\n  ~~~~~~~~~~~~~~~~~~~~\n  where: {\n    emp_id: {\n      equals: \"EMP912e46\"\n    },\n    month: 4,\n    year: 2024\n  }\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T06:36:46.523Z POST 0.7029589999983727 /api/hrms/v1/pay/payroll/update-many status = false, err = \nInvalid `prisma.payroll_master.updateMany()` invocation:\n\n{\n  data: [\n    {\n      working_hour: undefined\n    }\n  ],\n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  where: {\n    emp_id: {\n      equals: undefined\n    },\n    month: undefined,\n    year: undefined\n  }\n}\n\nArgument `data`: Invalid value provided. Expected payroll_masterUpdateManyMutationInput or payroll_masterUncheckedUpdateManyInput, provided (Object). "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:44:38.718Z POST 0.6663599999956205 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"'Microsoft.Jet.OLEDB.4.0'\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:46:57.324Z POST 2.0872629999998935 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"format\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:47:30.846Z POST 2.103993000000628 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42501`. Message: `ERROR: could not open file \"/Desktop\" for writing: Permission denied\nHINT: COPY TO instructs the PostgreSQL server process to write a file. You may want a client-side facility such as psql's \\copy.` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:49:37.492Z POST 2.139842999999928 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42501`. Message: `ERROR: could not open file \"/Desktop\" for writing: Permission denied\nHINT: COPY TO instructs the PostgreSQL server process to write a file. You may want a client-side facility such as psql's \\copy.` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:51:08.868Z POST 2.2757680000004257 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42809`. Message: `ERROR: could not open file \"/var\" for writing: Is a directory` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:51:38.946Z POST 2.114306000000397 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42809`. Message: `ERROR: could not open file \"/tmp\" for writing: Is a directory` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:57:50.134Z POST 2.0849379999999655 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"WITH\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T11:58:04.742Z POST 2.1322230000000673 /api/hrms/v1/pay/payroll/download status = false, err = \nInvalid `prisma.$queryRawUnsafe()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"WITH\"` "}
{"level":"error","message":"Date & Time:- 2024-04-25T13:09:48.562Z POST 0.2778040000121109 /api/hrms/v1/employee/leave status = false, err = \nInvalid `prisma.employee_leave_details.create()` invocation in\n/home/krish/Desktop/juidcoMain/JuidcoHrms/backend/src/component/juidcoHrms/dao/employee/empLeave.dao.ts:51:62\n\n  48   },\n  49 };\n  50 \n→ 51 const leaveRequest = await prisma.employee_leave_details.create({\n       data: {\n         employee_id: \"EMP912e43\",\n         emp_leave_type_id: null,\n         leave_from: \"2024-04-15\",\n         leave_to: \"2024-04-19\",\n         total_days: 5,\n         leave_reason: \"casc\",\n         file_upload: null,\n         half_day: true,\n         leave_status: undefined,\n     +   emp_leave_type: {\n     +     create: employee_leave_typeCreateWithoutEmployee_leave_detailsInput | employee_leave_typeUncheckedCreateWithoutEmployee_leave_detailsInput,\n     +     connectOrCreate: employee_leave_typeCreateOrConnectWithoutEmployee_leave_detailsInput,\n     +     connect: employee_leave_typeWhereUniqueInput\n     +   }\n       }\n     })\n\nArgument `emp_leave_type` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-26T04:39:30.028Z POST 0.47352500003762543 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (318, null, 2024-04-26, 2024-04-26 10:09:30.017, null, 0, 1, 2024-04-26 10:09:30.018, 2024-04-26 10:09:30.018).` "}
{"level":"error","message":"Date & Time:- 2024-04-26T10:48:15.881Z POST 3.958526999995229 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-04-26, 2024-04-26 16:18:15.825, null, 0, 1, 2024-04-26 16:18:15.869, 2024-04-26 16:18:15.869).` "}
{"level":"error","message":"Date & Time:- 2024-04-26T10:51:28.701Z POST 0.34565599999041297 /api/hrms/v1/employee/create status = false, err = Unexpected socket close "}
{"level":"error","message":"Date & Time:- 2024-04-27T04:49:28.051Z POST 0.37543600000208244 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (319, null, 2024-04-27, 2024-04-27 10:19:28.041, null, 0, 1, 2024-04-27 10:19:28.042, 2024-04-27 10:19:28.042).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T05:00:57.346Z POST 0.8903080000018235 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-04-29, 2024-04-29 10:30:57.336, null, 0, 1, 2024-04-29 10:30:57.337, 2024-04-29 10:30:57.337).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T05:59:00.411Z POST 0.35221899999305606 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (319, null, 2024-04-29, 2024-04-29 11:29:00.401, null, 0, 1, 2024-04-29 11:29:00.402, 2024-04-29 11:29:00.402).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T06:52:44.061Z POST 0.3526220000348985 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (318, null, 2024-04-29, 2024-04-29 12:22:44.053, null, 0, 1, 2024-04-29 12:22:44.054, 2024-04-29 12:22:44.054).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:28:35.143Z POST 0.30588500015437603 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-04-29, 2024-04-29 17:58:35.097, null, 0, 1, 2024-04-29 17:58:35.136, 2024-04-29 17:58:35.136).` "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:52:06.992Z GET 3.9110539999992397 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          skip: NaN,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:53:15.474Z GET 0.43863299999793526 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          skip: NaN,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:53:54.812Z GET 0.6598349999985658 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:53:57.437Z GET 0.31620299999485724 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:54:11.690Z GET 0.7778370000014547 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:54:50.458Z GET 0.4915069999988191 /api/hrms/v1/pay/payroll?limit=10&page=$%7Bpage%7D status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T12:56:16.931Z GET 0.496714000008069 /api/hrms/v1/pay/payroll?limit=10&page=1&page=1 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T13:02:08.235Z GET 0.39272499992512167 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          take: 10,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T13:02:20.074Z GET 0.6066459999419749 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:451:24\n\n  448 }\n  449 \n  450 const [data, count] = await prisma.$transaction([\n→ 451   prisma.employees.findMany({\n          skip: NaN,\n          select: {\n            payroll_master: {\n              select: {\n                id: true,\n                emp_id: true,\n                emp_name: true,\n                gross_pay: true,\n                leave_days: true,\n                working_hour: true,\n                total_allowance: true,\n                total_deductions: true,\n                non_billable: true,\n                present_days: true,\n                lwp_days: true,\n                salary_deducted: true,\n                status: true,\n                net_pay: true\n              },\n              orderBy: {\n                emp_id: \"asc\"\n              }\n            }\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-04-29T13:26:59.220Z POST 0.3357710000127554 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (319, null, 2024-04-29, 2024-04-29 18:56:59.21, null, 0, 1, 2024-04-29 18:56:59.212, 2024-04-29 18:56:59.212).` "}
{"level":"error","message":"Date & Time:- 2024-04-30T11:18:32.016Z POST 0.33070899546146393 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (344, null, 2024-04-30, 2024-04-30 16:48:31.973, null, 0, 1, 2024-04-30 16:48:32.014, 2024-04-30 16:48:32.014).` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:46:18.036Z GET 0.4355939999950351 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:420:46\n\n  417   };\n  418 }\n  419 \n→ 420 const data = await prisma.payroll_master.findMany({\n        skip: NaN,\n        select: {\n          id: true,\n          emp_id: true,\n          emp_name: true,\n          gross_pay: true,\n          leave_days: true,\n          working_hour: true,\n          total_allowance: true,\n          total_deductions: true,\n          non_billable: true,\n          present_days: true,\n          lwp_days: true,\n          salary_deducted: true,\n          status: true,\n          net_pay: true\n        },\n        orderBy: {\n          emp_id: \"asc\"\n        },\n      + take: Int\n      })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:46:20.778Z GET 0.464523000002373 /api/hrms/v1/pay/payroll status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:420:46\n\n  417   };\n  418 }\n  419 \n→ 420 const data = await prisma.payroll_master.findMany({\n        skip: NaN,\n        select: {\n          id: true,\n          emp_id: true,\n          emp_name: true,\n          gross_pay: true,\n          leave_days: true,\n          working_hour: true,\n          total_allowance: true,\n          total_deductions: true,\n          non_billable: true,\n          present_days: true,\n          lwp_days: true,\n          salary_deducted: true,\n          status: true,\n          net_pay: true\n        },\n        orderBy: {\n          emp_id: \"asc\"\n        },\n      + take: Int\n      })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:46:38.245Z GET 0.34760300000198185 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:420:46\n\n  417   };\n  418 }\n  419 \n→ 420 const data = await prisma.payroll_master.findMany({\n        take: 10,\n        select: {\n          id: true,\n          emp_id: true,\n          emp_name: true,\n          gross_pay: true,\n          leave_days: true,\n          working_hour: true,\n          total_allowance: true,\n          total_deductions: true,\n          non_billable: true,\n          present_days: true,\n          lwp_days: true,\n          salary_deducted: true,\n          status: true,\n          net_pay: true\n        },\n        orderBy: {\n          emp_id: \"asc\"\n        },\n      + skip: Int\n      })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:46:39.458Z GET 0.36843299999600276 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:420:46\n\n  417   };\n  418 }\n  419 \n→ 420 const data = await prisma.payroll_master.findMany({\n        take: 10,\n        select: {\n          id: true,\n          emp_id: true,\n          emp_name: true,\n          gross_pay: true,\n          leave_days: true,\n          working_hour: true,\n          total_allowance: true,\n          total_deductions: true,\n          non_billable: true,\n          present_days: true,\n          lwp_days: true,\n          salary_deducted: true,\n          status: true,\n          net_pay: true\n        },\n        orderBy: {\n          emp_id: \"asc\"\n        },\n      + skip: Int\n      })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:50:34.075Z GET 2.120244999998249 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          take: 10,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:50:46.923Z GET 0.37474400000064634 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          take: 10,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:07.709Z GET 0.7545229999959702 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          take: 10,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:10.189Z GET 0.4126399999950081 /api/hrms/v1/pay/payroll?limit=10 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          take: 10,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:21.047Z GET 0.45819000000483356 /api/hrms/v1/pay/payroll?limit=10? status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          skip: NaN,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:27.228Z GET 0.34206100000301376 /api/hrms/v1/pay/payroll?limit=10?page= status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          skip: NaN,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:29.390Z GET 0.3561760000011418 /api/hrms/v1/pay/payroll?limit=10?page=1 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          skip: NaN,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:51:36.470Z GET 0.5299360000062734 /api/hrms/v1/pay/payroll?limit=10?page=1 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/payroll/payroll.dao.ts:421:29\n\n  418 }\n  419 \n  420 const [data, count] = await prisma.$transaction([\n→ 421   prisma.payroll_master.findMany({\n          skip: NaN,\n          select: {\n            id: true,\n            emp_id: true,\n            emp_name: true,\n            gross_pay: true,\n            leave_days: true,\n            working_hour: true,\n            total_allowance: true,\n            total_deductions: true,\n            non_billable: true,\n            present_days: true,\n            lwp_days: true,\n            salary_deducted: true,\n            status: true,\n            net_pay: true\n          },\n          orderBy: {\n            emp_id: \"asc\"\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:58:50.382Z GET 0.2768449999857694 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=%222024-04-28%22 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:58:50.582Z GET 0.2624970000470057 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=%222024-04-28%22 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:59:07.917Z GET 0.30673199996817857 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-28 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:59:08.114Z GET 0.27494999999180436 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-28 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:59:44.969Z GET 0.39576499990653247 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-30 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T06:59:45.183Z GET 0.2804189999587834 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-30 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T07:00:09.062Z GET 0.3692779999691993 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-05-30 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T07:00:09.294Z GET 0.27976900001522154 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-05-30 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T07:18:27.619Z GET 0.2812139999587089 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-29 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T07:18:52.501Z GET 0.312758999876678 /api/hrms/v1/pay/payslip?emp_id=EMP912e43&date=2024-04-29 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22P03`. Message: `ERROR: incorrect binary data format in bind parameter 2` "}
{"level":"error","message":"Date & Time:- 2024-05-02T10:04:02.744Z GET 2.3660600000293925 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-02T10:04:29.768Z GET 2.139259999999922 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-02T10:06:30.123Z GET 0.309664000000339 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-02T10:06:43.135Z GET 2.1534270000001925 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-02T13:29:32.433Z POST 0.39214899999205954 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (351, null, 2024-05-02, 2024-05-02 18:59:32.425, null, 0, 1, 2024-05-02 18:59:32.426, 2024-05-02 18:59:32.426).` "}
{"level":"error","message":"Date & Time:- 2024-05-02T13:50:04.239Z POST 0.5564079999967362 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-05-02, 2024-05-02 19:20:04.231, null, 0, 1, 2024-05-02 19:20:04.232, 2024-05-02 19:20:04.232).` "}
{"level":"error","message":"Date & Time:- 2024-05-02T13:52:28.478Z POST 3.623348999999507 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (317, null, 2024-05-02, 2024-05-02 19:22:28.416, null, 0, 1, 2024-05-02 19:22:28.464, 2024-05-02 19:22:28.464).` "}
{"level":"error","message":"Date & Time:- 2024-05-02T13:56:59.567Z POST 2.314951000000292 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (331, null, 2024-05-02, 2024-05-02 19:26:59.483, null, 0, 1, 2024-05-02 19:26:59.552, 2024-05-02 19:26:59.552).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T04:41:44.453Z POST 2.3748729999933857 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (364, null, 2024-05-03, 2024-05-03 10:11:44.363, null, 0, 1, 2024-05-03 10:11:44.438, 2024-05-03 10:11:44.438).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T05:10:46.201Z POST 0.3805229999998119 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (332, null, 2024-05-03, 2024-05-03 10:40:46.192, null, 0, 1, 2024-05-03 10:40:46.193, 2024-05-03 10:40:46.193).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:05:36.214Z GET 2.4822880000001533 /api/hrms/v1/ulb/get?id=3 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: bigint = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:11:09.356Z GET 0.25095299998065457 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:22:32.788Z GET 2.0789529999992737 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42703`. Message: `column \"emp\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:22:33.750Z GET 0.7248009999993883 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42703`. Message: `column \"emp\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:23:20.333Z GET 2.2063680000001114 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type timestamp: \"null\"` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:23:40.891Z GET 2.2936540000000605 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: timestamp without time zone !== unknown\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:24:21.532Z GET 2.5104019999998854 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42601`. Message: `ERROR: syntax error at or near \"[\"` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:31:24.351Z GET 2.086330000000089 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T08:31:26.164Z GET 0.9997860000003129 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T10:26:00.474Z POST 0.33723900001496077 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (778, null, 2024-05-03, 2024-05-03 15:56:00.466, null, 0, 1, 2024-05-03 15:56:00.467, 2024-05-03 15:56:00.467).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:01:36.710Z POST 0.2435789997689426 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (780, null, 2024-05-03, 2024-05-03 16:31:36.708, null, 0, 1, 2024-05-03 16:31:36.709, 2024-05-03 16:31:36.709).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:02:17.022Z POST 0.2623069998808205 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (781, null, 2024-05-03, 2024-05-03 16:32:17.02, null, 0, 1, 2024-05-03 16:32:17.021, 2024-05-03 16:32:17.021).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:02:39.390Z POST 0.2859550002031028 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (782, null, 2024-05-03, 2024-05-03 16:32:39.388, null, 0, 1, 2024-05-03 16:32:39.389, 2024-05-03 16:32:39.389).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:07:55.141Z POST 0.2564550004899502 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (784, null, 2024-05-03, 2024-05-03 16:37:55.139, null, 0, 1, 2024-05-03 16:37:55.14, 2024-05-03 16:37:55.14).` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:38:01.295Z GET 2.655900000001566 /api/hrms/v1/ulb/get?id= status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:38:02.134Z GET 0.8395000000018626 /api/hrms/v1/ulb/get?id=2 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:38:51.672Z GET 0.4584000000031665 /api/hrms/v1/ulb/get?id= status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:38:52.028Z GET 0.40979999999399297 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:38:52.429Z GET 0.6187999999965541 /api/hrms/v1/ulb/get?id=2 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:05.420Z GET 0.5154999999940628 /api/hrms/v1/ulb/get?id= status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:05.749Z GET 0.3706999999994878 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:06.199Z GET 0.5868000000045868 /api/hrms/v1/ulb/get?id=2 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:22.214Z GET 0.4529999999940628 /api/hrms/v1/ulb/get?id= status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:22.559Z GET 0.5419000000110827 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:22.902Z GET 0.41550000000279397 /api/hrms/v1/ulb/get?id=2 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:37.929Z GET 0.6278000000020256 /api/hrms/v1/ulb/get?id= status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:38.275Z GET 0.43089999999210704 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:39:38.622Z GET 0.461699999999837 /api/hrms/v1/ulb/get?id=2 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:41:11.129Z GET 0.40679999999701977 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:41:11.535Z GET 0.4098999999987427 /api/hrms/v1/ulb/get?id=2 status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"ulb_masters\" does not exist` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:47:08.356Z GET 1.4050000000006548 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-03T11:48:16.670Z GET 0.7404999999998836 /api/hrms/v1/employee/attendance/count-daily status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42883`. Message: `ERROR: operator does not exist: date = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts.` "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:18:39.779Z POST 0.43938499997602776 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:20:33.580Z POST 0.43562300002668053 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:21:36.165Z POST 0.35954699997091666 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:21:43.252Z POST 0.2914219999802299 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:23:09.055Z POST 0.2988689999911003 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:24:01.057Z POST 0.3651580000296235 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:24:25.489Z POST 0.3388109999941662 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:25:13.472Z POST 0.3702819999307394 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:28:44.580Z POST 2.7036809999999605 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:28:53.662Z POST 1.7323959999994258 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:30:06.080Z POST 0.5415740000025835 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:31:33.574Z POST 2.5581459999993967 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:31:35.314Z POST 0.9768329999988055 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:32:45.054Z POST 0.3853519999975106 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:32:56.059Z POST 0.3759509999945294 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:33:21.931Z POST 0.34162399999331683 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:33:47.876Z POST 0.29932199997710995 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:33:50.560Z POST 0.3183569999819156 /api/hrms/v1/employee/create status = false, err = Cannot destructure property 'emp_education' of 'emp_education_details' as it is undefined. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:34:04.229Z POST 0.35225700002047233 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:85:34\n\n  82 if (isMany) {\n  83   return await tx[tableName].createMany({ data });\n  84 } else {\n→ 85   return await tx[tableName].create({\n         data: {\n           emp_type: 1,\n           office_name: \"XYZ123\",\n           office_code: \"XYZ123\",\n           ddo_code: \"DDO456\",\n           ddo_designation: \"Chief Officer\",\n           district: \"adc\"\n                     ~~~~~\n         }\n       })\n\nArgument `district`: Invalid value provided. Expected Int, provided String. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:34:37.376Z POST 0.4536779999907594 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:85:34\n\n  82 if (isMany) {\n  83   return await tx[tableName].createMany({ data });\n  84 } else {\n→ 85   return await tx[tableName].create({\n         data: {\n           married_status: \"cw\",\n           identification_marks: \"Mole on left arm\",\n           religion: \"wc\",\n           emp_categories: \"we\",\n           emp_home_state: \"New York\",\n           emp_district: \"wce\",\n                         ~~~~~\n           emp_blood_group: \"cw\",\n           emp_health_status: \"cwe\",\n           emp_ltc_home_town: \"New York City\",\n           emp_nearest_railway_station: \"Grand Central Terminal\",\n           emp_phy_health_type: \"cwe\",\n           emp_family: \"cwe\",\n           emp_family_name: \"Smith\",\n           emp_office_name: \"XYZ Corporation\",\n           emp_org_name: \"ABC Corp\",\n           emp_lang: [\n             {\n               language: \"Hindi\",\n               emp_lang_do: [\n                 \"read\",\n                 \"write\",\n                 \"speak\"\n               ]\n             }\n           ]\n         }\n       })\n\nArgument `emp_district`: Invalid value provided. Expected Int, provided String. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:35:16.857Z POST 0.39153799999621697 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:85:34\n\n  82 if (isMany) {\n  83   return await tx[tableName].createMany({ data });\n  84 } else {\n→ 85   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"Allowance Name\",\n                 wfe_date: \"2022-03-01\",\n                 amount_in: 122\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 name: \"Deduction Name\",\n                 wfe_date: \"2022-03-01\",\n                 acnt_no: 1234567890,\n                 amount_in: 500\n               }\n             ]\n           }\n         }\n       })\n\nArgument `acnt_no`: Invalid value provided. Expected String or Null, provided Int. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:36:34.603Z POST 0.4423689999966882 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:85:34\n\n  82 if (isMany) {\n  83   return await tx[tableName].createMany({ data });\n  84 } else {\n→ 85   return await tx[tableName].create({\n         data: {\n           emp_salary_allow: {\n             create: [\n               {\n                 name: \"Allowance Name\",\n                 wfe_date: \"2022-03-01\",\n                 amount_in: 122\n               }\n             ]\n           },\n           emp_salary_deduction: {\n             create: [\n               {\n                 name: \"Deduction Name\",\n                 wfe_date: \"2022-03-01\",\n                 acnt_no: 1234567890,\n                 amount_in: 500\n               }\n             ]\n           }\n         }\n       })\n\nArgument `acnt_no`: Invalid value provided. Expected String or Null, provided Int. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:36:47.503Z POST 0.4645349999773316 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:85:34\n\n  82 if (isMany) {\n  83   return await tx[tableName].createMany({ data });\n  84 } else {\n→ 85   return await tx[tableName].create(\nUnique constraint failed on the fields: (`emp_id`) "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:38:12.371Z POST 1.6998739999980899 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:38:49.102Z POST 0.528625999999349 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:85:34\n\n  82 if (isMany) {\n  83   return await tx[tableName].createMany({ data });\n  84 } else {\n→ 85   return await tx[tableName].create({\n         data: {\n           emp_office_details_id: 31,\n           emp_basic_details_id: 31,\n           emp_id: \"EMP262f73\",\n           emp_type: 1,\n           emp_personal_details_id: 30,\n           emp_address_details_id: 30,\n           emp_join_details_id: 30,\n           emp_salary_details_id: 28,\n           emp_loan_details_id: 28,\n           emp_family_details: {\n             create: [\n               {\n                 name: \"g4twg\",\n                 relation: \"4g4\",\n                 dob: \"g5g\",\n                 dependent: \"yes\"\n               },\n               {\n                 name: \"g4\",\n                 relation: \"g45\",\n                 dob: \"g45\",\n                 dependent: \"no\"\n               }\n             ]\n           },\n           emp_nominee_details: {\n             create: [\n               {\n                 nominee_name: \"John Doe\",\n                 relation: \"Spouse\",\n                 percentage: 50.5,\n                 address: \"123 Main St\",\n                 minor: \"No\"\n               },\n               {\n                 nominee_name: \"Jane Doe\",\n                 relation: \"Child\",\n                 percentage: 49.5,\n                 address: \"456 Oak St\",\n                 minor: \"yes\"\n               }\n             ]\n           },\n           emp_increment_details: {\n             create: [\n               {\n                 scale: \"A\",\n                 inc_date: \"2022-02-28\",\n                 inc_amount: 5000,\n                 basic_pay_after_inc: 55000,\n                 vide_order_no: \"V123\",\n                 vide_order_date: \"2022-03-01\"\n               }\n             ]\n           },\n           emp_promotion_details: {\n             create: [\n               {\n                 designation: {\n                   from: \"Manager\",\n                   to: \"Senior\"\n                 },\n                 scale: {\n                   from: \"A\",\n                   to: \"1\"\n                 },\n                 vide_order_no: \"V456\",\n                 vide_order_date: \"2022-03-15\",\n                 transfer: \"yes\"\n               }\n             ]\n           },\n           emp_transfer_details: {\n           ~~~~~~~~~~~~~~~~~~~~\n             create: [\n               {\n                 designation: {\n                   from: \"acsd\",\n                   to: \"cas\"\n                 },\n                 office: {\n                   from: \"casd\",\n                   to: \"casdc\"\n                 },\n                 join_date: \"2024-05-12\",\n                 vide_order_no: \"3232\",\n                 vide_order_date: \"2024-05-11\",\n                 transfer_after_prom: \"no\"\n               }\n             ]\n           },\n           emp_timebound_details: {\n             create: [\n               {\n                 pay_scale: {\n                   from: \"casd\",\n                   to: \"cad\"\n                 },\n                 inc_amt: \"5000\",\n                 b_after_pay: \"55000\",\n                 vide_order_no: \"V123\",\n                 vide_order_date: \"2022-03-01T12:34:56.789Z\",\n                 remarks: \"Example remark\"\n               }\n             ]\n           },\n           emp_education_details: {\n             create: [\n               {\n                 edu_level: \"Matriculation\",\n                 stream: \"vdsfv\",\n                 board: \"dfvdsf\",\n                 passing_year: \"3434\",\n                 grade: \"1st\",\n                 upload_edu: \"C:\\\\fakepath\\\\Screenshot 2024-02-14 172443.png\",\n                 marks: 100\n               },\n               {\n                 edu_level: \"Intermediate\",\n                 stream: null,\n                 board: null,\n                 passing_year: null,\n                 grade: null,\n                 upload_edu: null\n               }\n             ]\n           },\n           emp_training_details: {\n             create: [\n               {\n                 name_of_training: \"acas\",\n                 training_type: \"Basic\",\n                 name_of_inst: \"casdcasd\",\n                 starting_from: {\n                   from: \"2323-03-03\"\n                 },\n                 end_to: {\n                   to: \"2323-03-03\"\n                 },\n                 tot_day_training: \"234\",\n                 upload_edu: \"C:\\\\fakepath\\\\Screenshot 2024-02-14 172443.png\"\n               }\n             ]\n           },\n       ?   emp_del?: Int,\n       ?   created_at?: DateTime,\n       ?   updated_at?: DateTime,\n       ?   emp_attendance?: employee_attendance_historyUncheckedCreateNestedManyWithoutEmployeeInput,\n       ?   emp_hierarchy?: employee_hierarchyUncheckedCreateNestedManyWithoutEmployeeInput,\n       ?   emp_leave_details?: employee_leave_detailsUncheckedCreateNestedManyWithoutEmployeeInput,\n       ?   emp_leave_chart?: employee_leave_chartUncheckedCreateNestedManyWithoutEmployeeInput,\n       ?   emp_daily_attendance?: employee_daily_attendanceUncheckedCreateNestedManyWithoutEmployeeInput,\n       ?   emp_claim?: employee_claimUncheckedCreateNestedManyWithoutEmployeesInput,\n       ?   leave_encashment?: leave_encashmentUncheckedCreateNestedManyWithoutEmployeeInput,\n       ?   pension_master?: pension_masterUncheckedCreateNestedManyWithoutEmployeesInput,\n       ?   payroll_master?: payroll_masterUncheckedCreateNestedManyWithoutEmployeesInput\n         }\n       })\n\nUnknown argument `emp_transfer_details`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T06:51:27.008Z GET 0.34337100002449006 /api/hrms/v1/employee/get status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:337:24\n\n  334 }\n  335 \n  336 const [data, count] = await prisma.$transaction([\n→ 337   prisma.employees.findMany({\n          skip: NaN,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            emp_del: 0\n          },\n        + take: Int\n        })\n\nArgument `take` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:34:01.327Z GET 0.3993369999807328 /api/hrms/v1/employee/get?limit=10&page=1&department=null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: NaN\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:34:12.193Z GET 2.0325259999999616 /api/hrms/v1/employee/get?limit=10&page=1&department=null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: NaN\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:34:14.511Z GET 0.4151220000003377 /api/hrms/v1/employee/get?limit=10&page=1&department=null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: NaN\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:34:49.316Z GET 0.3657260000036331 /api/hrms/v1/employee/get?limit=10&page=1&department=null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: NaN\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:34:50.185Z GET 0.3402730000016163 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: 2\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:34:54.809Z GET 0.5210500000030152 /api/hrms/v1/employee/get?limit=10&page=1&department=null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: NaN\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:35:07.907Z GET 0.3345679999983986 /api/hrms/v1/employee/get?limit=10&page=1&department=null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: NaN\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:37:02.872Z GET 1.3110509999969508 /api/hrms/v1/employee/get?limit=10&page=1&department=null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: NaN\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:38:50.243Z GET 1.1999400000204332 /api/hrms/v1/employee/get?limit=10&page=1false status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            emp_del: 0\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:41:11.675Z GET 0.7040699999779463 /api/hrms/v1/employee/get?limit=10&page=1null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            emp_del: 0\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:41:22.672Z GET 0.37654600001405925 /api/hrms/v1/employee/get?limit=10&page=1null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            emp_del: 0\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:41:53.628Z GET 0.463365999981761 /api/hrms/v1/employee/get?limit=10&page=1null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            emp_del: 0\n          },\n        + skip: Int\n        })\n\nArgument `skip` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:42:15.118Z GET 0.32931500003905967 /api/hrms/v1/employee/get?limit=10&page=1&department=null status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: NaN\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:42:19.012Z GET 0.29156799998600036 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: 2\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:43:24.690Z GET 0.4090929999947548 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:357:24\n\n  354 }\n  355 \n  356 const [data, count] = await prisma.$transaction([\n→ 357   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: 2\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type: NaN\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:44:01.003Z GET 0.5491140000003725 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:353:24\n\n  350 }\n  351 \n  352 const [data, count] = await prisma.$transaction([\n→ 353   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type: NaN\n                }\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:46:21.291Z GET 0.285024999990128 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:353:24\n\n  350 }\n  351 \n  352 const [data, count] = await prisma.$transaction([\n→ 353   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type: NaN\n                }\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:46:27.540Z GET 0.45737700001336634 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:353:24\n\n  350 }\n  351 \n  352 const [data, count] = await prisma.$transaction([\n→ 353   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type: NaN\n                }\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:47:30.321Z GET 0.3731499999994412 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:353:24\n\n  350 }\n  351 \n  352 const [data, count] = await prisma.$transaction([\n→ 353   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type: NaN\n                }\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:49:37.856Z GET 2.793431000000055 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:353:24\n\n  350 }\n  351 \n  352 const [data, count] = await prisma.$transaction([\n→ 353   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type: NaN\n                }\n              }\n            ]\n          }\n        })\n\nUnknown argument `emp_type`. Available options are marked with ?. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:56:50.287Z GET 2.726035000000138 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:56:53.238Z GET 1.057557999999517 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:58:13.240Z GET 3.710055999999895 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:359:24\n\n  356 }\n  357 \n  358 const [data, count] = await prisma.$transaction([\n→ 359   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: 2\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type_id: {\n                        equals: NaN\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:58:14.222Z GET 1.6914050000004863 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:359:24\n\n  356 }\n  357 \n  358 const [data, count] = await prisma.$transaction([\n→ 359   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                OR: [\n                  {\n                    emp_join_details: {\n                      OR: [\n                        {\n                          department_id: {\n                            equals: 2\n                          }\n                        },\n                        {\n                          designation_id: {\n                            equals: NaN\n                          }\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    emp_basic_details: {\n                      emp_type_id: {\n                        equals: NaN\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T07:59:26.731Z GET 3.653652000000875 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:01:20.766Z GET 0.4128550000023097 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:03:17.735Z GET 0.6488050000043586 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:04:03.748Z GET 2.713130000000092 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:05:10.328Z GET 2.7485350000006292 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:05:31.480Z GET 2.723883000000569 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:05:33.270Z GET 1.0818849999996019 /api/hrms/v1/employee/get?limit=10&page=1&department=2 status = false, err = \nInvalid `prisma.employees.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:355:24\n\n  352 }\n  353 \n  354 const [data, count] = await prisma.$transaction([\n→ 355   prisma.employees.findMany({\n          skip: 0,\n          take: 10,\n          select: {\n            emp_id: true,\n            emp_basic_details: {\n              select: {\n                emp_name: true,\n                dob: true\n              }\n            },\n            emp_join_details: {\n              select: {\n                department: true,\n                grade_pay: true,\n                doj: true,\n                designation: true,\n                basic_pay: true\n              }\n            },\n            created_at: true,\n            updated_at: true\n          },\n          where: {\n            OR: [\n              {\n                emp_join_details: {\n                  OR: [\n                    {\n                      department_id: {\n                        equals: 2\n                      }\n                    },\n                    {\n                      designation_id: {\n                        equals: NaN\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                emp_basic_details: {\n                  emp_type_id: {\n                    equals: NaN\n                  }\n                }\n              }\n            ]\n          }\n        })\n\nArgument `equals` is missing. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:25:30.572Z GET 0.31919499998912215 /api/hrms/v1/pay/payslip?emp_id=EMP912e41 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/employee/payslip.dao.ts:82:45\n\n  79 //       AND EXTRACT(YEAR FROM date) = EXTRACT(YEAR FROM ${date}) \n  80 //   AND EXTRACT(MONTH FROM date) = EXTRACT(MONTH FROM ${date});\n  81 //     `;\n→ 82 const payroll = await prisma.payroll_master.findMany({\n       where: {\n         emp_id: \"EMP912e41\",\n         AND: [\n           {\n             date: {\n               gte: new Date(\"Invalid Date\")\n                    ~~~~~~~~~~~~~~~~~~~~~~~~\n             }\n           },\n           {\n             date: {\n               lt: new Date(\"Invalid Date\")\n             }\n           }\n         ]\n       }\n     })\n\nInvalid value for argument `gte`: Provided Date object is invalid. Expected Date. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:25:46.528Z GET 0.24161199992522597 /api/hrms/v1/pay/payslip?emp_id=EMP912e41&date= status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/employee/payslip.dao.ts:82:45\n\n  79 //       AND EXTRACT(YEAR FROM date) = EXTRACT(YEAR FROM ${date}) \n  80 //   AND EXTRACT(MONTH FROM date) = EXTRACT(MONTH FROM ${date});\n  81 //     `;\n→ 82 const payroll = await prisma.payroll_master.findMany({\n       where: {\n         emp_id: \"EMP912e41\",\n         AND: [\n           {\n             date: {\n               gte: new Date(\"Invalid Date\")\n                    ~~~~~~~~~~~~~~~~~~~~~~~~\n             }\n           },\n           {\n             date: {\n               lt: new Date(\"Invalid Date\")\n             }\n           }\n         ]\n       }\n     })\n\nInvalid value for argument `gte`: Provided Date object is invalid. Expected Date. "}
{"level":"error","message":"Date & Time:- 2024-05-04T08:25:49.804Z GET 0.3889859998598695 /api/hrms/v1/pay/payslip?emp_id=EMP912e41&date=2024--4 status = false, err = \nInvalid `prisma.payroll_master.findMany()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/employee/payslip.dao.ts:82:45\n\n  79 //       AND EXTRACT(YEAR FROM date) = EXTRACT(YEAR FROM ${date}) \n  80 //   AND EXTRACT(MONTH FROM date) = EXTRACT(MONTH FROM ${date});\n  81 //     `;\n→ 82 const payroll = await prisma.payroll_master.findMany({\n       where: {\n         emp_id: \"EMP912e41\",\n         AND: [\n           {\n             date: {\n               gte: new Date(\"Invalid Date\")\n                    ~~~~~~~~~~~~~~~~~~~~~~~~\n             }\n           },\n           {\n             date: {\n               lt: new Date(\"Invalid Date\")\n             }\n           }\n         ]\n       }\n     })\n\nInvalid value for argument `gte`: Provided Date object is invalid. Expected Date. "}
{"level":"error","message":"Date & Time:- 2024-05-04T09:34:34.625Z POST 0.2703610002063215 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (782, null, 2024-05-04, 2024-05-04 15:04:34.619, null, 0, 1, 2024-05-04 15:04:34.62, 2024-05-04 15:04:34.62).` "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:19:15.358Z POST 2.3944659999688156 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (776, null, 2024-05-06, 2024-05-06 11:49:15.279, null, 0, 1, 2024-05-06 11:49:15.341, 2024-05-06 11:49:15.341).` "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:28:15.835Z POST 0.4554439999628812 /api/hrms/v1/employee/create status = false, err = \nInvalid `tx[tableName].create()` invocation in\n/home/krish/Desktop/JuidcoHrms/backend/src/component/juidcoHrms/dao/empOnBoard.dao.ts:85:34\n\n  82 if (isMany) {\n  83   return await tx[tableName].createMany({ data });\n  84 } else {\n→ 85   return await tx[tableName].create({\n         data: {\n           department_id: 3,\n           designation_id: undefined,\n           task: undefined,\n           class: undefined,\n           doj: \"2004-10-12\",\n           effective_pay_commision: \"2\",\n           confirmation_order: null,\n           pay_scale: \"2\",\n                      ~~~\n           pay_band: undefined,\n           grade_pay: \"1800\",\n           doc: undefined,\n           basic_pay: 326,\n           conf_order_number: undefined,\n           deduction_type: \"CPS\",\n           conf_order_date: undefined,\n           member_gis: null,\n           appoint_authority: undefined,\n           gis_account: undefined,\n           ulb: undefined,\n           last_inc_order: undefined,\n           name_of_service: undefined,\n           last_inc_order_date: undefined,\n           bank_name: undefined,\n           wef_date: undefined,\n           branch_name: undefined,\n           pf_category: undefined,\n           acc_no: undefined,\n           ifsc: undefined,\n           sen_grade_list: undefined\n         }\n       })\n\nArgument `pay_scale`: Invalid value provided. Expected Float or Null, provided String. "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:34:06.605Z POST 0.3041120001580566 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:40:34.914Z POST 0.23887800006195903 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:46:14.277Z POST 0.26107800006866455 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:46:24.497Z POST 0.2926700001116842 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:49:30.626Z POST 0.2510239998809993 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:51:58.333Z POST 0.2878469997085631 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:52:09.644Z POST 0.2918879999779165 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-06T06:52:42.746Z POST 0.23760399967432022 /api/hrms/v1/employee/create status = false, err = Cannot read properties of undefined (reading 'length') "}
{"level":"error","message":"Date & Time:- 2024-05-06T07:01:55.016Z POST 0.34065099991858006 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (777, null, 2024-05-06, 2024-05-06 12:31:55.014, null, 0, 1, 2024-05-06 12:31:55.015, 2024-05-06 12:31:55.015).` "}
{"level":"error","message":"Date & Time:- 2024-05-06T07:03:01.078Z POST 0.29541199980303645 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (778, null, 2024-05-06, 2024-05-06 12:33:01.077, null, 0, 1, 2024-05-06 12:33:01.078, 2024-05-06 12:33:01.078).` "}
{"level":"error","message":"Date & Time:- 2024-05-06T07:03:34.306Z POST 0.35717799980193377 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (779, null, 2024-05-06, 2024-05-06 12:33:34.304, null, 0, 1, 2024-05-06 12:33:34.305, 2024-05-06 12:33:34.305).` "}
{"level":"error","message":"Date & Time:- 2024-05-06T07:04:18.035Z POST 0.31594299990683794 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (780, null, 2024-05-06, 2024-05-06 12:34:18.033, null, 0, 1, 2024-05-06 12:34:18.034, 2024-05-06 12:34:18.034).` "}
{"level":"error","message":"Date & Time:- 2024-05-06T07:40:07.179Z POST 0.3586500000092201 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (790, null, 2024-05-06, 2024-05-06 13:10:07.172, null, 0, 1, 2024-05-06 13:10:07.173, 2024-05-06 13:10:07.173).` "}
{"level":"error","message":"Date & Time:- 2024-05-06T07:49:48.343Z POST 0.3060460000997409 /api/hrms/v1/employee/attendance/create status = false, err = \nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `23502`. Message: `Failing row contains (791, null, 2024-05-06, 2024-05-06 13:19:48.341, null, 0, 1, 2024-05-06 13:19:48.342, 2024-05-06 13:19:48.342).` "}
